/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN AdministrateurActionsGenerated.js PLEASE EDIT ../AdministrateurActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import AdministrateurApi from "../../../api/AdministrateurApi";

let actionsFunction = {

  //CRUD METHODS

  // Create administrateur
  createAdministrateur: function(administrateur) {
    return function(dispatch) {
      return AdministrateurApi
        .createAdministrateur(administrateur)
        .then(administrateur => {
          dispatch(actionsFunction.createAdministrateurSuccess(administrateur));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createAdministrateurSuccess: function(administrateur) {
    return { type: types.CREATE_ADMINISTRATEUR_SUCCESS, payload: administrateur };
  },


  // Delete administrateur
  deleteAdministrateur: function(id) {
    return function(dispatch) {
      return AdministrateurApi
        .deleteAdministrateur(id)
        .then(administrateur => {
          dispatch(actionsFunction.deleteAdministrateurSuccess(administrateur));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteAdministrateurSuccess: function(administrateur) {
    return { type: types.DELETE_ADMINISTRATEUR_SUCCESS, payload: administrateur };
  },


  // Get administrateur
  loadAdministrateur: function(id) {
    return function(dispatch) {
      return AdministrateurApi
        .getOneAdministrateur(id)
        .then(administrateur => {
          dispatch(actionsFunction.loadAdministrateurSuccess(administrateur));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadAdministrateurSuccess: function(administrateur) {
    return { type: types.GET_ADMINISTRATEUR_SUCCESS, payload: administrateur };
  },

  // Load  list
  loadAdministrateurList: function() {
    return function(dispatch) {
      return AdministrateurApi
        .getAdministrateurList()
        .then(list => {
          dispatch(actionsFunction.loadAdministrateurListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadAdministrateurListSuccess: function(list) {
    return { type: types.LIST_ADMINISTRATEUR_SUCCESS, payload: list };
  },

	
  // Save administrateur
  saveAdministrateur: function(administrateur) {
    return function(dispatch) {
      return AdministrateurApi
        .saveAdministrateur(administrateur)
        .then(administrateur => {
          dispatch(actionsFunction.saveAdministrateurSuccess(administrateur));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveAdministrateurSuccess: function(administrateur) {
    return { type: types.UPDATE_ADMINISTRATEUR_SUCCESS, payload: administrateur };
  },


};

export default actionsFunction;
